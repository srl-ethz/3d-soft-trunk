//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: JDot_fun.cpp
//
// MATLAB Coder version            : 5.1
// C/C++ source code generated on  : 27-Jul-2021 20:59:00
//

// Include Files
#include "JDot_fun.h"
//#include "rt_nonfinite.h"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_powd_snf(double u0, double u1)
{
  double y;
/*  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      */
      y = std::pow(u0, u1);
    //}
  //}

  return y;
}

//
// JDOT_FUN
//     JDOT = JDOT_FUN(q,dq,L)
// Arguments    : const double in1[4]
//                const double in2[4]
//                const double in3[2]
//                double JDot[12]
// Return Type  : void
//
void JDot_fun(const double in1[4], const double in2[4], const double in3[2],
              double JDot[12])
{
  double JDot_tmp;
  double b_JDot_tmp;
  double b_t47_tmp;
  double b_t50_tmp;
  double b_t56_tmp;
  double b_t60_tmp;
  double b_t86_tmp;
  double b_t88_tmp;
  double b_t96_tmp;
  double b_t97_tmp;
  double c_JDot_tmp;
  double d_JDot_tmp;
  double t10;
  double t100;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t17;
  double t19;
  double t2;
  double t20;
  double t21;
  double t22;
  double t23;
  double t24;
  double t28;
  double t29;
  double t3;
  double t30;
  double t31;
  double t32;
  double t33;
  double t34;
  double t38;
  double t39;
  double t4;
  double t40;
  double t41;
  double t42;
  double t45;
  double t45_tmp;
  double t47;
  double t47_tmp;
  double t5;
  double t50;
  double t50_tmp;
  double t50_tmp_tmp;
  double t54;
  double t55;
  double t55_tmp;
  double t56;
  double t56_tmp;
  double t56_tmp_tmp;
  double t6;
  double t60;
  double t60_tmp;
  double t7;
  double t76;
  double t8;
  double t86;
  double t86_tmp;
  double t87;
  double t87_tmp;
  double t88;
  double t88_tmp;
  double t88_tmp_tmp;
  double t9;
  double t93;
  double t93_tmp;
  double t95;
  double t96;
  double t96_tmp;
  double t97_tmp;
  double t97_tmp_tmp;
  double t98;
  double t99;
  double t99_tmp_tmp;

  //     This function was generated by the Symbolic Math Toolbox version 8.6.
  //     27-Jul-2021 20:49:53
  t2 = std::cos(in1[0]);
  t3 = std::cos(in1[1]);
  t4 = std::cos(in1[2]);
  t5 = std::cos(in1[3]);
  t6 = std::sin(in1[0]);
  t7 = std::sin(in1[1]);
  t8 = std::sin(in1[2]);
  t9 = std::sin(in1[3]);
  t10 = in1[0] * 2.0;
  t11 = in1[3] * in1[3];
  t19 = 1.0 / in1[1];
  t22 = 1.0 / in1[3];
  t12 = std::cos(t10);
  t13 = t2 * t2;
  t14 = std::sin(t10);
  t15 = t8 * 2.0;
  t16 = t6 * t6;
  t17 = in1[3] * t9;
  t20 = t19 * t19;
  t21 = rt_powd_snf(t19, 3.0);
  t23 = 1.0 / t11;
  t24 = rt_powd_snf(t22, 3.0);
  t29 = in1[0] + -in1[2];
  t10 += -in1[2];
  t45_tmp = in3[1] * t5;
  t45 = t45_tmp * t7 * t22;
  t50_tmp = in3[1] * t2;
  t50_tmp_tmp = t50_tmp * t3;
  b_t50_tmp = t50_tmp_tmp * t9;
  t50 = b_t50_tmp * t22;
  t55_tmp = t50_tmp * t7 * t9;
  t55 = t55_tmp * t22;
  t56_tmp_tmp = in3[1] * t3;
  t56_tmp = t56_tmp_tmp * t6;
  b_t56_tmp = t56_tmp * t9;
  t56 = b_t56_tmp * t22;
  t60_tmp = in3[1] * t6 * t7;
  b_t60_tmp = t60_tmp * t9;
  t60 = b_t60_tmp * t22;
  t28 = t13 * 2.0;
  t30 = std::cos(t29);
  t31 = std::sin(t29);
  t32 = t3 * t13;
  t33 = t4 * t14;
  t34 = t3 * t16;
  t39 = std::cos(t10);
  t40 = std::sin(t10);
  t41 = t8 * t13 * -2.0;
  t42 = t17 + (t5 - 1.0);
  t47_tmp = in3[1] * t7;
  b_t47_tmp = t47_tmp * t9;
  t47 = b_t47_tmp * t23;
  t38 = t3 * t33;
  t54 = t13 + t34;
  t76 = (t32 + -t13) + 1.0;
  t86_tmp = in3[1] * in2[0];
  b_t86_tmp = t86_tmp * t7;
  t86 = b_t86_tmp * t22 * (t5 - 1.0) * t30;
  t87_tmp = in3[1] * in2[1];
  t87 = t87_tmp * t3 * t22 * (t5 - 1.0) * t31;
  t88_tmp = in3[1] * in2[2];
  t88_tmp_tmp = t88_tmp * t7;
  b_t88_tmp = t88_tmp_tmp * t22 * (t5 - 1.0);
  t88 = b_t88_tmp * t30;
  t93_tmp = in3[1] * in2[3];
  t93 = t93_tmp * t7 * t23 * t31 * t42;
  t99_tmp_tmp = in3[1] * t4;
  t30 = t99_tmp_tmp * t7;
  t10 = t47_tmp * t8;
  t29 = t10 * t9;
  t99 = ((((b_t50_tmp * t23 + -(t50_tmp_tmp * t5 * t22)) + t30 * t9 * t13 * t22)
          + t29 * t14 * t22 / 2.0) + t30 * t13 * t23 * (t5 - 1.0)) + t10 * t14 *
    t23 * (t5 - 1.0) / 2.0;
  t98 = ((((t45 + -t47) + t4 * t50) + t8 * t56) + t50_tmp_tmp * t4 * t23 * (t5 -
          1.0)) + t56_tmp * t8 * t23 * (t5 - 1.0);
  t100 = ((((b_t56_tmp * t23 + -(t56_tmp_tmp * t5 * t6 * t22)) + t29 * t16 * t22)
           + b_t47_tmp * t22 * t33 / 2.0) + t10 * t16 * t23 * (t5 - 1.0)) +
    t47_tmp * t23 * (t5 - 1.0) * t33 / 2.0;
  t95 = (((t15 + t33) + t41) + t15 * t32) + -t38;
  b_t50_tmp = in3[0] * t2;
  t96_tmp = t50_tmp * t6;
  b_t96_tmp = b_t50_tmp * t7;
  t96 = (((b_t96_tmp * t19 + t50) + b_t50_tmp * t20 * (t3 - 1.0)) + t96_tmp * t7
         * t15 * t22 * (t5 - 1.0)) + t30 * t22 * (t5 - 1.0) * (t28 - 1.0);
  t97_tmp = in3[0] * t6;
  t97_tmp_tmp = t50_tmp * t4;
  t10 = t97_tmp_tmp * t6;
  b_t97_tmp = t97_tmp * t7;
  t29 = (((b_t97_tmp * t19 + t56) + t97_tmp * t20 * (t3 - 1.0)) + t10 * t7 * t22
         * (t5 - 1.0) * 2.0) + t47_tmp * t22 * (t5 - 1.0) * -t8 * (t28 - 1.0);
  t50 = t88_tmp * t22 * (t3 - 1.0) * (t5 - 1.0);
  t47_tmp = t99_tmp_tmp * t22;
  t56 = in3[1] * t9;
  JDot_tmp = t56 * t22 * (t3 - 1.0);
  b_JDot_tmp = t6 * t45 + -(t6 * t47);
  c_JDot_tmp = in3[1] * t23 * (t3 - 1.0) * (t5 - 1.0);
  JDot[0] = ((in2[1] * t29 + in2[3] * ((((b_JDot_tmp + JDot_tmp * -t8 * (t28 -
    1.0)) + c_JDot_tmp * -t8 * (t28 - 1.0)) + t10 * t9 * t22 * (t3 - 1.0) * 2.0)
    + t10 * t23 * (t3 - 1.0) * (t5 - 1.0) * 2.0)) - in2[0] * ((((-t55 +
    b_t50_tmp * t19 * (t3 - 1.0)) - t99_tmp_tmp * t16 * t22 * (t3 - 1.0) * (t5 -
    1.0) * 2.0) + t47_tmp * (t3 - 1.0) * (t5 - 1.0) * t28) + t96_tmp * t8 * t22 *
              (t3 - 1.0) * (t5 - 1.0) * 4.0)) + t50 * t39;
  d_JDot_tmp = in3[1] * t22;
  t50_tmp_tmp = t10 * t22 * (t3 - 1.0) * (t5 - 1.0);
  t56_tmp = t99_tmp_tmp * t9;
  b_t56_tmp = in3[1] * t15;
  b_t47_tmp = t2 * t45 + -(t2 * t47);
  JDot[1] = ((in2[1] * t96 + in2[0] * ((((-t60 + t97_tmp * t19 * (t3 - 1.0)) +
    d_JDot_tmp * (t3 - 1.0) * (t5 - 1.0) * t41) + b_t56_tmp * t16 * t22 * (t3 -
    1.0) * (t5 - 1.0)) + t50_tmp_tmp * 4.0)) + in2[3] * ((((b_t47_tmp + t56_tmp *
    t22 * (t3 - 1.0) * (t28 - 1.0)) + t99_tmp_tmp * t23 * (t3 - 1.0) * (t5 - 1.0)
    * (t28 - 1.0)) + t96_tmp * t9 * t15 * t22 * (t3 - 1.0)) + t96_tmp * t15 *
              t23 * (t3 - 1.0) * (t5 - 1.0))) - t50 * t40;
  JDot[2] = ((t86 + t87) - t88) - t93;
  t50 = t47_tmp * (t5 - 1.0);
  t47_tmp = t8 - t40;
  JDot[3] = ((in2[1] * (((((t55 - b_t50_tmp * t3 * t19) + b_t96_tmp * t20 * 2.0)
    + b_t50_tmp * t21 * (t3 - 1.0) * 2.0) - t50 * t32) - t56_tmp_tmp * t8 * t14 *
                        t22 * (t5 - 1.0) / 2.0) + in2[0] * t29) + in2[3] * t99)
    + b_t88_tmp * t47_tmp / 2.0;
  t29 = in3[0] * t3;
  t30 = in3[1] * t8;
  b_t50_tmp = t30 * t22 * (t5 - 1.0);
  JDot[4] = ((-in2[1] * (((((t60 - t29 * t6 * t19) + b_t97_tmp * t20 * 2.0) +
    t97_tmp * t21 * (t3 - 1.0) * 2.0) - d_JDot_tmp * (t5 - 1.0) * t38 / 2.0) -
    b_t50_tmp * t34) + in2[0] * t96) - in2[3] * t100) + b_t88_tmp * (t4 - t39) /
    2.0;
  d_JDot_tmp = in3[0] * t7;
  JDot[5] = ((in2[3] * t98 + in2[1] * (((((t29 * t20 * 2.0 + d_JDot_tmp * t19) -
    d_JDot_tmp * t21 * 2.0) + t56_tmp_tmp * t9 * t22) + t97_tmp_tmp * t7 * t22 *
    (t5 - 1.0)) + t60_tmp * t8 * t22 * (t5 - 1.0))) + t86_tmp * t3 * t22 * (t5 -
              1.0) * t31) - t88_tmp * t3 * t22 * (t5 - 1.0) * t31;
  d_JDot_tmp = t93_tmp * t23 * t42;
  t29 = t86_tmp * t22 * (t3 - 1.0) * (t5 - 1.0);
  t10 = t30 * t14;
  JDot[6] = ((-in2[2] * (t50 * t76 + t10 * t22 * (t3 - 1.0) * (t5 - 1.0) / 2.0)
              + d_JDot_tmp * t95 / 2.0) + t87_tmp * t7 * t22 * (t5 - 1.0) *
             t47_tmp / 2.0) + t29 * t39;
  t50 = t4 * t34;
  JDot[7] = ((in2[2] * (b_t50_tmp * t54 + t50_tmp_tmp) + d_JDot_tmp * (((t4 *
    t13 + t50) + t2 * t6 * t8) + t2 * t3 * t6 * -t8)) - t29 * t40) + t87_tmp *
    t6 * t7 * t22 * (t5 - 1.0) * t31;
  JDot[8] = ((-t86 - t87) + t88) + t93;
  t47_tmp = t30 * t9 * t14;
  d_JDot_tmp = t88_tmp * t23 * t42;
  JDot[9] = ((in2[1] * t99 + in2[3] * ((((((((t55 + t50_tmp * t5 * t7 * t23 *
    2.0) - t55_tmp * t24 * 2.0) - t99_tmp_tmp * t5 * t22 * t76) + t56_tmp * t23 *
    t76 * 2.0) + t99_tmp_tmp * t24 * (t5 - 1.0) * t76 * 2.0) - t45_tmp * t8 *
    t14 * t22 * (t3 - 1.0) / 2.0) + t47_tmp * t23 * (t3 - 1.0)) + t10 * t24 *
    (t3 - 1.0) * (t5 - 1.0))) + in2[0] * ((((b_JDot_tmp + JDot_tmp * t33) +
    c_JDot_tmp * t33) + t56 * t12 * t22 * (t3 - 1.0) * -t8) + in3[1] * t12 * t23
              * (t3 - 1.0) * (t5 - 1.0) * -t8)) + d_JDot_tmp * t95 / 2.0;
  JDot_tmp = t45_tmp * t22;
  JDot[10] = ((-in2[1] * t100 - in2[3] * ((((((((t60 + t45_tmp * t6 * t7 * t23 *
    2.0) - b_t60_tmp * t24 * 2.0) - JDot_tmp * (t3 - 1.0) * t33 / 2.0) + t56 *
    t23 * (t3 - 1.0) * t33) + t56 * t15 * t23 * t54) + JDot_tmp * -t8 * t54) +
    in3[1] * t24 * (t3 - 1.0) * (t5 - 1.0) * t33) + b_t56_tmp * t24 * (t5 - 1.0)
    * t54)) + in2[0] * ((((b_t47_tmp + t56_tmp * t12 * t22 * (t3 - 1.0)) +
    t47_tmp * t22 * (t3 - 1.0)) + t99_tmp_tmp * t12 * t23 * (t3 - 1.0) * (t5 -
    1.0)) + t10 * t23 * (t3 - 1.0) * (t5 - 1.0))) + d_JDot_tmp * (((t8 * t14 +
    t4 * t28) + t50 * 2.0) + t3 * t14 * -t8) / 2.0;
  t50 = t3 * t9;
  t47_tmp = t2 * t4;
  JDot_tmp = t47_tmp * t7;
  b_JDot_tmp = t6 * t7;
  t47_tmp = t47_tmp * t5 * t7;
  c_JDot_tmp = t5 * t6 * t7 * t8;
  JDot[11] = ((in2[1] * t98 + t93_tmp * t24 * ((((((((((t50 * -2.0 + in1[3] * t3
    * t5 * 2.0) + JDot_tmp * 2.0) + t50 * t11) + b_JDot_tmp * t15) - t47_tmp *
    2.0) - c_JDot_tmp * 2.0) - JDot_tmp * t17 * 2.0) - b_JDot_tmp * t8 * t17 *
    2.0) + t47_tmp * t11) + c_JDot_tmp * t11)) - b_t86_tmp * t23 * t31 * t42) +
    t88_tmp_tmp * t23 * t31 * t42;
}
int main(){
  double JDot[16];
  double q[4] = {0.3, 0.4, 0.3, 0.5};
  double dq[4] = {0.3, 0.4, 0.3, 0.5};
  double L[2] = {0.125, 0.125};
  JDot_fun(q,dq,L,JDot);
  Eigen::MatrixXd JacobianDot = Eigen::MatrixXd::Zero(4,4);
  for (int i = 0; i < 4; i++){
    for(int j = 0; j < 4; j++){
      JacobianDot(i,j) = JDot[4*i+j];
    }
  }
  std::cout << JacobianDot << std::endl;
}
//
// File trailer for JDot_fun.cpp
//
// [EOF]
//
